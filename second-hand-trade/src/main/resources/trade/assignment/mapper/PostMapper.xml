<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="trade.assignment.repository.PostRepository">
	 <!-- 세부 게시글 정보  (모달팝업용) -->
	<select id="detailRead" resultType="trade.assignment.dto.FollowinPostDTO">
			select * from
        (select pa.postid as postid, pa.userid, pa.caption, pa.cateid, pa.url, pa.price, pa.content,pa.regdate, pa.location, a_regdate, p_regdate, isLike, isStore  from
        
			(select p.id as POSTID, p.USERID, p.CAPTION, p.CATEID,p.PRICE,p.CONTENT,p.REGDATE, group_concat(a.url separator '|') as url, p.location, a.REGDATE as a_regdate, p.regdate as p_regdate
			 from tbl_post p left join tbl_attach a on p.id = a.POSTID group by p.id) as pa
			join
			(select pl.postid, isLike, isStore from
				(select distinct(p.id) as postid, l.userid as isLike from tbl_post p left join tbl_post_like l on p.id = l.POSTID and l.userid = #{loginid}) pl
				join
				(select distinct(p.id) as postid, s.userid as isStore from tbl_post p left join tbl_store s on p.id = s.POSTID and s.userid = #{loginid}) ps
				on pl.postid=ps.postid) as pls
			on
			pa.postid = pls.postid) plsa
			
        join
			(select p.id as pid, u.mno, u.name as name, u.PROFILEPHOTO,u.NICKNAME
			from tbl_post p join tbl_user u on p.userid = u.MNO and p.id=#{postid}) as pu
		on
		plsa.USERID = pu.mno
        and plsa.postid = pu.pid
        
	</select>

       
	<!-- 메인 피드용 게시글 읽기 (팔로우하는 사람의 게시글 정보 / 최신 등록 순)-->
	<select id="mainRead" resultType="trade.assignment.dto.FollowinPostDTO">
				select * from
        (select pa.postid as postid, pa.userid, pa.caption, pa.cateid, pa.price, pa.content, pa.url, pa.location, a_regdate, p_regdate, isLike, isStore  from
        
			(select p.id as POSTID, p.USERID, p.CAPTION,p.PRICE,p.CONTENT, p.CATEID, group_concat(a.url separator '|') as url, p.location, a.REGDATE as a_regdate, p.regdate as p_regdate
			 from tbl_post p left join tbl_attach a on p.id = a.POSTID group by p.id) as pa
			join
			(select pl.postid, isLike, isStore from
				(select distinct(p.id) as postid, l.userid as isLike from tbl_post p left join tbl_post_like l on p.id = l.POSTID and l.userid = 30) pl
				join
				(select p.id as postid, s.userid as isStore from tbl_post p left join tbl_store s on p.id = s.POSTID and s.userid = #{userid}) ps
				on pl.postid=ps.postid) as pls
			on
			pa.postid = pls.postid) plsa
			
        join
			(select u.mno, u.name as name, u.PROFILEPHOTO
			from tbl_post p join tbl_user u on p.userid = u.mno and p.userid = #{userid} or u.mno = #{userid} group by u.mno) as uf
		on
			plsa.USERID = uf.mno
		order by p_regdate DESC, a_regdate DESC
			
     
<!-- 		select * from
        (select pa.postid as postid, pa.userid, pa.caption, pa.cateid, pa.url, pa.location, a_regdate, p_regdate, isLike, isStore  from
        
			(select p.id as POSTID, p.USERID, p.CAPTION, p.CATEID, group_concat(a.url separator '|') as url, p.location, a.REGDATE as a_regdate, p.regdate as p_regdate
			 from tbl_post p left join tbl_attach a on p.id = a.POSTID group by p.id) as pa
			join
			(select pl.postid, isLike, isStore from
				(select distinct(p.id) as postid, l.userid as isLike from tbl_post p left join tbl_post_like l on p.id = l.POSTID and l.userid = #{userid}) pl
				join
				(select p.id as postid, s.userid as isStore from tbl_post p left join tbl_store s on p.id = s.POSTID and s.userid = #{userid}) ps
				on pl.postid=ps.postid) as pls
			on
			
        join
			(select u.MNO, u.NAME as USERNAME, u.PROFILEPHOTO
			from tbl_follow f join tbl_user u on f.FOLLOWEDID = u.MNO and f.userid = #{userid} or u.MNO = #{userid} group by u.MNO) as uf
		on
			plsa.USERID = uf.MNO
		order by p_regdate DESC, a_regdate DESC -->
	</select>
	
		<!-- 유저 게시글 읽기 -->
	<select id="read" resultType="trade.assignment.dto.FollowinPostDTO">
		select pa.*, likeCount, replyCount from
			(select p.id as ID, p.USERID, p.CAPTION, p.CATEID, group_concat(a.url separator '|') as url, p.regdate as p_regdate
			from tbl_post p left join tbl_attach a on p.id = a.POSTID group by postid order by a.url) pa
		left join
			(select p.id, count(*) as likeCount from tbl_post p right join tbl_post_like l on p.id=l.postid group by p.id) pl
		on
		pa.id=pl.id
		left join
			(select p.id, count(*) as replyCount from tbl_post p right join tbl_reply r on p.id=r.postid group by p.id) pr
		on
		pa.id=pr.id
		where userid=#{userid}
		order by p_regdate desc
	</select>
	
		<!-- 게시글 작성 -->
	 <insert id="create">
		insert into tbl_post (userid, cateid, caption,content,price, location)
		values(#{userid}, #{cateid}, #{caption},#{content},#{price}, #{location})
		<selectKey keyProperty="id" resultType="int" order="AFTER">
			select last_insert_id() as id
		</selectKey>
	</insert>
	

	
		<!-- 	첨부파일 추가 -->
		<!-- 게시글에 이미지,동영상추가 -->
	<insert id="addAttach">
		insert into tbl_attach (postid, url) values (LAST_INSERT_ID(), #{url})
	</insert> 
			<!-- 인기 post 전체목록 -->
	<select id="topPost" resultType="trade.assignment.domain.Post">
	 <![CDATA[
          	select topT.*, (@rank := @rank +1) as rank
        	from
            ( select pa.* , likeCount, replyCount from
            (select p.id, p.userid,p.cateid, u.name,u.nickname,u.profilephoto, p.caption,p.price,p.CONTENT, p.regdate, a.url, p.location
            from tbl_post as p
            join tbl_attach as a
            on p.id = a.postid
            join tbl_user as u
            on p.userid = u.mno
            group by p.id
            ) as pa
            
            left join
            
            (select p.id, count(*) as likeCount from tbl_post as p
            join tbl_post_like as l
            on p.id = l.postid
            group by p.id) as pl
            on pa.id = pl.id
            
            left join
            
            (select p.id, count(*) as replyCount from tbl_post as p
            join tbl_reply as r
            on p.id = r.postid
            group by p.id) as pr
            on pa.id = pr.id ) as topT, (select @rank := 0) as rankT
            
            order by likeCount desc, replyCount desc;
 	 ]]>
	</select>

</mapper>



